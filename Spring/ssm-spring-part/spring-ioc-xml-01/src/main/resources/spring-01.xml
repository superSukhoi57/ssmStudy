<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--在这里只是组件信息的配置，没有创建对象。当applicationContext读取时才创建实例对象！！-->


    <!--1.可以使用无参数构造函数实例化的组件,如何进行ioc配置呢一个组件信息
    bean 标签:通过配置 bean 标签告诉 IOC 容器需要创建对象的组件信息
    id 属性:bean 的唯一标识,方便后期获取 Bean!
    class 属性:组件类的全限定符!
    注意:要求当前组件类必须包含无参数构造函数!
    将一个组件类-声明两个组件信息-【默认是单例模式]-会实例化两个组件对象
    -->
    <bean id="happyComponent1" class="com.example.ioc_01.HappyComponent" />
    <bean id="happyComponent2" class="com.example.ioc_01.HappyComponent" />



    <!--
    静态工厂类的IOC配置。
        id =“组件的标识”
    class =“工厂类的全限定符
    factory-method="静态工厂方法”
    -->
    <bean id="clientService" class="com.example.ioc_01.staticFatory" factory-method="createInstance" />




    <!--3.非静态工厂如何声明ioc配置-->
    <!--3.1配置工厂类的组件信息-->
    <bean id="defaultServiceLocator" class="com.example.ioc_01.nonStaticFactory" />
    <!--3.2 通过指定非静态工厂对象和方法名来配置生成的ioc信息-->
    <bean id="clientService2" factory-bean="defaultServiceLocator" factory-method="createClientServiceInstance" />




    <!-- —————————————————————————————————————————————————————————————————————————————— -->
    <!--引用和被引用的类都要在IOC容器中，引用和被引用的bean没有先后写的顺序-->
    <!--构造函数有参数注入-->
    <bean id="the-inject" class="com.example.ioc_01.Inject"/>
    <bean id="di-signal" class="com.example.ioc_01.DI_signalParam">
        <!--给构造函数传值，di的配置
        name指定构造函数形参的名字
        value是直接的参数值
        ref是bean对象的id值
        index指定下角标，从零开始！
        -->
        <constructor-arg ref="the-inject"/>
        <constructor-arg name="age" value="45"/>
    </bean>




    <!--通过setter方法注入
    name是setXxxx方法去掉set并且将首字母小写的字符串！！
    value|ref 二选一      -->
    <bean id="di-setter" class="com.example.ioc_01.DI_bySetter">
        <property name="name" value="Tony"/>
        <property name="age" value="15"/>
        <property name="sex" value="男"/>
    </bean>
</beans>